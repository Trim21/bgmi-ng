# type: ignore
# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

import sphinx.application
import sphinx_rtd_theme

doc_path = os.path.dirname(os.path.dirname(__file__))
project_path = os.path.dirname(doc_path)
sys.path.insert(0, project_path)

# -- Project information -----------------------------------------------------

project = "BGmi"
copyright = "2019, BGmi Developer Team"
author = "BGmi Developer Team"

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.todo",
    "sphinx.ext.viewcode",
    "sphinx.ext.autosectionlabel",
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.githubpages",
    # "sphinxcontrib.httpdomain",
    # "sphinxcontrib.httpexample",
    # "sphinx_issues",
    "autoapi.extension",
    "sphinx.ext.napoleon",
    "sphinx_copybutton",
]

# Github repo
issues_github_path = "BGmi/BGmi"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "zh-CN"

html_favicon = "_static/logo144.jpg"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [
    "**/python/*.rst",
]
todo_include_todos = True
# -- Options for HTML output -------------------------------------------------

html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

viewcode_follow_imported_members = True
html_show_sourcelink = True
smart_quotes = True
smartquotes = False

autoapi_dirs = ["../../bgmi"]
autoapi_python_use_implicit_namespaces = True
autoapi_options = [
    "members",
    # 'undoc-members',
    # "private-members",
    # 'show-inheritance',
    "special-members",
    "show-module-summary",
]
autoapi_add_toctree_entry = True
autoapi_template_dir = os.path.join(os.path.dirname(__file__), "_autoapi")
autoapi_keep_files = False

autodoc_default_options = {
    "member-order": "bysource",
    "special-members": "__init__",
    "exclude-members": "__weakref__",
    # "ignore-module-all": "",
}
autoclass_content = "class"


def setup(app: sphinx.application.Sphinx):
    def skip_member(app, what, name: str, obj, skip, options):
        if what == "module" and "._" in name:
            print(name, skip)
            return True

    if "autoapi-skip-member" in app.events.events:
        app.connect("autoapi-skip-member", skip_member)
